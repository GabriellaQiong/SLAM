% MCL_SLAM script for ESE 650 Learning in Robotics
% Written by Qiong Wang at University of Pennsylvania
% 03/23/2014

%% Initialization
% Map
global MAP
MAP.res   = 0.05;  %meters
MAP.xmin  = -40;   %meters
MAP.ymin  = -40;
MAP.xmax  =  40;
MAP.ymax  =  40;
MAP.sizex = ceil((MAP.xmax - MAP.xmin) / MAP.res + 1); %cells
MAP.sizey = ceil((MAP.ymax - MAP.ymin) / MAP.res + 1);
MAP.map   = zeros(MAP.sizex,MAP.sizey,'int8');

% Constant Params
Tsensor = trans([0.1 0 0])*rotz(0)*roty(0)*rotx(0);
pose    = [0; 0; 0];
motion  = [dc; alpha];
numP    = 40;               % Number of particles
ps      = rand(3, numP);  
w       = zeros(numP, 1); 
X1      = zeros(3, numP);

% Function handels
m2cell    = @(val, min, res) ceil((val - min) ./ res);

%% Looping
for i = 200 : numData
    % Transforms
    Timu  = rotz(rpy(3, i))*roty(rpy(2, i))*rotx(rpy(1, i));
    Tpose = trans([pose(1 : 2) 0]);
    T     = Tpose * Timu * Tsensor;

    % xy position in the sensor frame
    xs0 = (ranges(:,i) .* cos(angles))';
    ys0 = (ranges(:,i) .* sin(angles))';
    
    % convert to body frame using initial transformation
    X = [xs0; ys0; zeros(size(xs0)); ones(size(xs0))];
    Y = T * X;
    
    % transformed xs and ys
    xs1 = Y(1,:);
    ys1 = Y(2,:);
    
    % convert from meters to cells
    xis  = m2cell(xs1, MAP.xmin, MAP.res);  % ceil((xs1 - MAP.xmin) ./ MAP.res);
    yis  = m2cell(ys1, MAP.ymin, MAP.res);  % ceil((ys1 - MAP.ymin) ./ MAP.res);
    xcis = m2cell(pose(1), MAP.xmin, MAP.res);
    ycis = m2cell(pose(2), MAP.xmin, MAP.res);
    
    % check the indices and populate the map
    indGood = (xis > 1) & (yis > 1) & (xis < MAP.sizex) & (yis < MAP.sizey);
    inds    = sub2ind(size(MAP.map), xis(indGood), yis(indGood));
    [x, y] = getMapCellsFromRay(pose(1), pose(2), xis(indGood), yis(indGood));
    effIdx  = (xcis > 1) & (ycis > 1) & (xcis < MAP.sizex) & (ycis < MAP.sizey);
    path   = sub2ind(size(MAP.map), x(effIdx), y(effIdx));
    MAP.map(path) = max(MAP.map(path) - 50, 0 );
    MAP.map(inds) = MAP.map(inds) + 50;
    
    
    % compute correlation
    x_im = MAP.xmin : MAP.res : MAP.xmax; % x-positions of each pixel of the map
    y_im = MAP.ymin : MAP.res : MAP.ymax; % y-positions of each pixel of the map
    
    x_range = -1 : 0.05 : 1;
    y_range = -1 : 0.05 : 1;
    
    c = map_correlation(MAP.map, x_im, y_im, Y(1:3, :), x_range, y_range);
    
    for j = 1 : numP
        ps(:, j) = sample_motion(motion(:, i), ps(:, j));
        xp       = m2cell(ps(1, j), -1, .05);
        yp       = m2cell(ps(2, j), -1, .05);
        w(j)     = c(xp, yp);
    end
    
    wSum = sum(w(:));
    w    = w / wSum;
    idx  = resample(w);
    pose = ps(:, idx(1));
    ps   = ;
    
    set(ht, 'String', {'Test Map Correlation'; sprintf('Time = %05f s',tsEn(i) - tsEn(1))});
    
    % plot original lidar points
    subplot(1, 3, 1);
    plot(xs1,ys1,'.');
    axis square;
    title('Original LIDAR points');
    drawnow;
    
    % plot map
    subplot(1, 3, 2);
    imshow(MAP.map);
    %     imagesc(MAP.map);
    %     colormap(winter);
    axis square;
    title('Plot of the map');
    drawnow;
    
    % plot correlation
    subplot(1, 3, 3);
    surf(c);
    title('Plot of correlation');
    axis square;
    drawnow;
end

    for m=1:1:M
        w = rand*totalWeight; %Uniformely drawed pseudo-random number
        %We search the particule that have been selected.
        i = 1; 
        w = w - X_(3,i);
        
        while w > 0
            i = i + 1;
            w = w - X_(3,i);
        end     
        X(1,m,t) = X_(1,i); %We put the selected particule in the current belief
        X(2,m,t) = X_(2,i);
    end
end
 
MuA = zeros(2,N); %Mean of the particules
for t=1:1:N
    MuA(:,t) = mean(X(:,:,t),2);
end
 
h(1) = plot(GT(1,:),GT(2,:),'go');
hold on;
h(2) = plot(MuA(1,:),MuA(2,:),'b+');


return;
h1 = figure('NumberTitle', 'off', 'Name', 'Test LIDAR Visualization');
set(h1,'units','normalized','position',[0 .4 .6 .6]);
ht = suptitle({'Test Map Correlation'; sprintf('Time = %05f s',tsEn(1) - tsEn(1))});
